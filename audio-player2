#!/usr/bin/env perl

# This program is the evolution of audio-player.

# Lightweight, ultra-simple audio server
# Write-up: https://ology.github.io/2021/06/04/mojolicious-music-player/

# To run, symlink your audio source in a public subdirectory:
# audio-player/public $ ln -s /media/you/external_drive/Music/ Audio
# Then:
# audio-player $ morbo audio-player2
# And browse to:
# http://127.0.0.1:3000/refresh

use Encoding::FixLatin qw(fix_latin);
use File::Find::Rule ();
use List::SomeUtils qw(first_index);
use Mojolicious::Lite -signatures;
use Mojo::Util qw(url_unescape);
use Number::Format ();
use Storable qw(retrieve store);

use constant PATH   => 'public/Audio/';       # Where the audio files live
use constant EXTS   => ('*.mp3', '*.m4a');    # The tracks of interest
use constant TRACKS => app->moniker . '.dat'; # The tracks file


get '/' => sub ($c) {
  my $autoadvance = $c->param('autoadvance') || 0; # Automatically move to the next track
  my $autoplay    = $c->param('autoplay') || 0;    # Start playing the current track
  my $current     = $c->param('current') || 0;     # The last and next played track
  my $noinc       = $c->param('noinc') || 0;       # Do not increment to the next track
  my $shuffle     = $c->param('shuffle') || 0;     # Select a random track to play next
  my $query       = $c->param('query') || '';      # The (url_escaped) search query
  my $showrate    = $c->param('showrate') || '';   # Filter by the requested rate

  my $audio = {}; # Bucket for all tracks
  my $match = []; # Bucket for all query matches

  # Load the track list or flash an error
  if (-e TRACKS) {
    $audio = retrieve(TRACKS);
  }
  else {
    $c->flash(message => 'Cannot read track list file. Please <a href="/refresh">refresh</a>');
  }

  if ($query) {
    # Convert encoded things like &amp; back into &
    $query = url_unescape($query);

    # Brute force through every track, looking for matches
    for my $key (sort { $a <=> $b } keys %$audio) {
      next if $showrate && !_in_rate_range($showrate, $audio->{$key}{rating});
      push @$match, $key if lc($audio->{$key}{track}) =~ /$query/i;
    }

    $current = _get_current($match, $current, $shuffle, $noinc);
  }
  # Don't compute track rates if not incrementing
  elsif ($showrate && !$noinc) {
    my ($op, $rate) = split / /, $showrate;

    my $filtered = [];

    # Gather the filtered tracks
    for my $trk (sort { $a <=> $b } keys %$audio) {
      if ($op eq '<') {
        push @$filtered, $trk if $audio->{$trk}{rating} < $rate;
      }
      elsif ($op eq '=') {
        push @$filtered, $trk if $audio->{$trk}{rating} == $rate;
      }
      elsif ($op eq '>') {
        push @$filtered, $trk if $audio->{$trk}{rating} > $rate;
      }
    }

    $current = _get_current($filtered, $current, $shuffle, $noinc);
  }
  else {
    # If shuffling, get a random audio track index, otherwise increment...
    $current = $shuffle && !$noinc ? int(rand keys %$audio) : $noinc ? $current : $current + 1;
  }

  # Do not have a track when there is no current track index
  my $track = $audio->{$current}{track} || '';
#  app->log->debug("Track: $track");

  my $rating = $audio->{$current}{rating} || 0;

  # Add a number separator comma
  my $nf = Number::Format->new;
  my $matches = $nf->format_number(scalar @$match);

  $c->render(
    template    => 'index',
    audio       => $audio,
    track       => $track,
    rating      => $rating,
    autoplay    => $autoplay,
    autoadvance => $autoadvance,
    current     => $current,
    shuffle     => $shuffle,
    query       => $query,
    match       => $match,
    matches     => $matches,
    showrate    => $showrate,
  );
} => 'index';

sub _get_current ($match, $current, $shuffle, $noinc) {
  # If shuffling, get a random member of the matches,
  # otherwise increment, unless we are told not to
  if ($shuffle && !$noinc) {
    $current = $match->[int rand @$match];
  }
  else {
    # Find the index of the current item in the search results
    my $idx = first_index { $_ >= $current } @$match;
    $idx = 0 unless $idx;

    # To increment, or not to increment...
    if ($noinc) {
      $current = $match->[$idx];
    }
    else {
      $current = $match->[$idx + 1];
    }
  }

  return $current;
}

sub _in_rate_range ($shown, $rating) {
  my ($op, $rate) = split / /, $shown;

  my $in_range = 0;

  if ($op eq '<') {
    $in_range++ if $rating < $rate;
  }
  elsif ($op eq '=') {
    $in_range++ if $rating == $rate;
  }
  elsif ($op eq '>') {
    $in_range++ if $rating > $rate;
  }

  return $in_range;
}


get '/refresh' => sub ($c) {
  # If a previous track file exists, use its ratings
  my $old = {};
  if (-e TRACKS) {
    $old = retrieve(TRACKS);
  }

  # Assume there are no duplicate tracks
  my %by_name;
  for my $i (keys %$old) {
    $by_name{ $old->{$i}{track} } = $old->{$i}{rating};
  }

  # Process the filenames
  my $audio = {};
  my @files = File::Find::Rule->file()->name(EXTS)->in(PATH);
  my $n = 0;
  for my $file (@files) {
    # Remove "public" from the name
    $file =~ s/^public//;
    # Make sure the name is properly displayable
    $file = fix_latin($file);

    # Determine the track rating
    my $rate = 0;
    $rate = $by_name{$file}
      if exists $by_name{$file};

    # Add the track and rate to the audio list
    $audio->{$n} = { track => $file, rating => $rate };

    $n++;
  }

  # Save the files to disk
  store $audio, TRACKS;

  $c->flash(message => 'Saved track list file');

  $c->redirect_to($c->url_for('index'));
} => 'refresh';


post '/rating' => sub ($c) {
  my $track = $c->param('current');
  my $rate  = $c->param('rating');

  my $audio = retrieve(TRACKS);

  $audio->{$track}{rating} = $rate;

  store $audio, TRACKS;

  $c->redirect_to($c->url_for('index'));
} => 'rating';


get '/stats' => sub ($c) {
  my $audio = retrieve(TRACKS);

  my ($total, $rated, $rate) = (0, 0, []);

  for my $key (keys %$audio) {
    my $r = $audio->{$key}{rating};
    $rated++ if $r;
    $rate->[$r]++;
    $total++;
  }

  $c->render(
    template => 'stats',
    total    => $total,
    rate     => $rate,
    rated    => $rated,
  );
} => 'stats';


app->start;

__DATA__

@@ index.html.ep
% layout 'default';
% title 'Music!';

% # Flash error/message
% if (flash('error')) {
%= tag h4 => (style => 'color:red') => sub { flash('error') }
% }
% if (flash('message')) {
%= tag h4 => (style => 'color:green') => sub { flash('message') }
% }

% # Checkboxes
<div>
  <label for="autoadvance"><b>Autoadvance:</b></label>
  <input type="checkbox" id="autoadvance" name="autoadvance" title="Automatically advance to the next track" <%= $autoadvance ? 'checked' : '' %> />
  &nbsp;
  <label for="autoplay"><b>Autoplay:</b></label>
  <input type="checkbox" id="autoplay" name="autoplay" title="Automatically start playing the current track" <%= $autoplay ? 'checked' : '' %> />
  &nbsp;
  <label for="shuffle"><b>Shuffle:</b></label>
  <input type="checkbox" id="shuffle" name="shuffle" title="Select a random track" <%= $shuffle ? 'checked' : '' %> />
</div>

% # Current track name
<p id="track"><b>Track:</b> <%= $track %></p>

% # Audio widget
<p>
  <div>
    <audio controls id="myAudio" <%= $autoplay ? "autoplay='autoplay'" : '' %> preload="auto" crossorigin="anonymous" src="<%== $track %>">
      Your browser does not support the <code>audio</code> element.
    </audio>
    <div id="warning"><b>Could not load audio!</b></div>
  </div>
</p>

% # Rate track
<b><a href="/stats" id="statslink" title="Inspect rating stats">Rating</a>:</b>
% for my $rate ([0,'None'], [1,'Bad'], [2,'Poor'], [3,'Fair'], [4,'Good'], [5,'Best']) {
&nbsp;
<input type="radio" name="rating" value="<%= $rate->[0] %>" <%= $rate->[0] eq $rating ? 'checked' : '' %> title="<%= $rate->[1] %>" />
% }
&nbsp;
<select name="showrate" class="btn btn-mini" title="Filter by rating">
  <option value="">Any</option>
% for my $show (
%   '< 1', '= 1', '> 1',
%   '< 2', '= 2', '> 2',
%   '< 3', '= 3', '> 3',
%   '< 4', '= 4', '> 4',
%   '< 5'
% ) {
  <option value="<%= $show %>" <%= $showrate eq $show ? 'selected' : '' %>><%= $show %></option>
% }
</select>
<p></p>

% # Playlist history select
<p>
  <select id="playlist" name="playlist" class="form-control input-lg" title="Playback history">
    <option value="" disabled selected>History</option>
  </select>
  <i class="fa fa-chevron-down"></i>
</p>

% # Search query
<div class="input-group">
  <input type="search" id="query" name="query" class="form-control" placeholder="Search" value="<%= $query %>" title="Track search query" />
  <button type="button" id="clearsearch" class="btn bg-transparent" title="Clear the search query">
    <i class="fa fa-times"></i>
  </button>
</div>

% # Track buttons
<p></p>
<p>
  <button id="firsttrack" class="btn btn-outline-dark" title="Move to the first track"><i class="fa fa-fast-backward" aria-hidden="true"></i> First track</button>
  &nbsp;
  <button id="nexttrack" class="btn btn-outline-dark" title="Advance to the next track">Next track <i class="fa fa-step-forward" aria-hidden="true"></i></button>
</p>

% # Search query matches
% if (@$match) {
<p></p>
<p><b>Matches:</b> <%= $matches %></p>
<ol>
%   for my $n (@$match) {
  <li>
%     if ($track eq $audio->{$n}{track}) {
    <b><a href="#" class="trackmatch" data-current="<%= $n %>"><%= $audio->{$n}{track} %></a></b>
%     } else {
    <a href="#" class="trackmatch" data-current="<%= $n %>"><%= $audio->{$n}{track} %></a>
%     }
  </li>
%   }
</ol>
% } else {
%   if ($query) {
<p></p>
<p id="no_matches">No matches</p>
%   }
% }

<script>
$(document).ready( function () {

% # Rate track function
  function rating (e) {
    var rating = $('input[name=rating]:checked').val();
    $.ajax({
      url: "<%= url_for('rating') %>" + '?current=' + <%= $current %> + '&rating=' + rating,
      method: 'POST',
      success: function(data, textStatus, jqXHR) {
        console.log('Rating: ' + rating);
      },
      error: function(jqXHR, textStatus, error) {
        console.log('Rating: ' + error);
      }
    });
  }

% # Advance track function
  function advance (force = 0, current = -1, noinc = 0, useq = 1) {
    var showrate = $('select[name=showrate] option').filter(':selected').val();
    var query = '';
    if (useq === 1) {
      query = $('input[name=query]').val();
    }
    if (current === -1) {
      current = <%= $current || 0 %>;
    }
    var shuffle = 0;
    if ($('#shuffle').is(':checked')) {
      shuffle = 1;
    }
    var autoplay = 0;
    if ($('#autoplay').is(':checked')) {
      autoplay = 1;
    }
    autoadvance = 0;
    if ($('#autoadvance').is(':checked')) {
      autoadvance = 1;
    }
    if (force === 1 || autoadvance === 1) {
      var link = "<%= url_for('index') %>?current=" + current
        + '&noinc=' + noinc
        + '&query=' + encodeURI(query)
        + '&shuffle=' + shuffle
        + '&autoplay=' + autoplay
        + '&autoadvance=' + autoadvance
        + '&showrate=' + showrate;
      window.location = link;
    }
  }

% # Keep track of the volume
  var vol = localStorage.getItem('playback_volume');
  if (vol === null) {
    vol = 1;
    localStorage.setItem('playback_volume', vol);
  }

% # Keep track of the played audio history
//var plh = [];                                                  // Reset history
//localStorage.setItem('playlist_history', JSON.stringify(plh)); // Reset history & comment the next 5 lines:
  var plh = JSON.parse(localStorage.getItem('playlist_history'));
  if (plh === null) {
    plh = [];
    localStorage.setItem('playlist_history', JSON.stringify(plh));
  }
  var max = 10;
  var j = 0;
  for (var i = plh.length; i >= 0; i--) {
    for (var key in plh[i]) {
      if (plh[i].hasOwnProperty(key)) {
        $('#playlist').append($('<option>', {
          text: key,
          value: plh[i][key]
        }));
      }
    }
    if (j >= max) {
      break;
    }
    j++;
  }

% # Miscelaneous jQuery on events
  $('#playlist').on('change', function() {
    var current = $(this).children('option:selected').val();
    advance(1, current, 1, 0);
  });
  $('#query').on('keypress', function (e) {
      if (e.which == 13) {
        advance();
      }
  });
  $('input[type=radio]').on('click', function() {
    rating();
  });
  $('#clearsearch').on('click', function() {
    $('input[name=query]').val('');
  });
  $('#firsttrack').on('click', function() {
    advance(1, 0, 1, 0);
  });
  $('#nexttrack').on('click', function() {
    advance(1);
  });
  $('.trackmatch').on('click', function() {
    current = $(this).attr('data-current');
    advance(1, current, 1);
  });

% # Hide the playback warning
  $('#warning').hide();

% # Configure the audio element
  $('#myAudio').attr('src', "<%== $track %>");
  $('#myAudio').on('error', function() {
    if ("<%= $track %>") {
      console.log('Playback error!');
      $('#warning').show();
      advance();
    }
  });
  $('#myAudio').on('loadedmetadata', function() {
    console.log('Loaded metadata');
    document.getElementById('myAudio').volume = vol;
  });
  $('#myAudio').on('volumechange', function() {
    var v = document.getElementById('myAudio').volume;
    localStorage.setItem('playback_volume', v);
    console.log('Volume changed to ' + v);
  });
  $('#myAudio').on('playing', function() {
    console.log('Playing: ' + '<%= $current %>');
  });
  $('#myAudio').on('ended', function() {
    console.log('...Ended');
    if (plh.length >= max) {
      plh.shift();
    }
    plh.push({ "<%== $track %>": "<%= $current %>" });
    localStorage.setItem('playlist_history', JSON.stringify(plh));
    advance();
  });

});
</script>


@@ stats.html.ep
% layout 'default';
% title 'Music stats';
<p><b>Total:</b> <%= $total %></p>
<p><b>Rated:</b> <%= $rated %></p>
% for my $i (0 .. $#$rate) {
<p><b><%= $i %> rating:</b> <%= $rate->[$i] %></p>
% }


@@ layouts/default.html.ep
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="/style.css">
    <title><%= title %></title>
  </head>
  <body>
    <%= content %>
    <p></p>
    <div id="footer" class="text-secondary">
      <hr>
      Built by <a href="http://gene.ology.net/">Gene</a>
      with <a href="https://www.perl.org/">Perl</a>,
      <a href="https://mojolicious.org/">Mojolicious</a>
      and <a href="https://jquery.com/">jQuery</a>
    </div>
  </body>
</html>
